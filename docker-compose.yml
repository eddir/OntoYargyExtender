version: "3"

services:
  pg:
    restart: always
    image: postgres:11
    volumes:
      - pgdata_zilions:/var/lib/postgresql/data/
    environment:
      POSTGRES_DB: oe
      POSTGRES_USER: oe
      POSTGRES_NAME: oe
      POSTGRES_PASSWORD: oepass
    expose:
      - "5432"

  pgadmin:
    container_name: pgadmin
    restart: always
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: "ea@rostkov.me"
      PGADMIN_DEFAULT_PASSWORD: "oepass"
    ports:
      - "8008:80"
    networks:
      - default
    depends_on:
      - pg

  django:
    restart: always
    build:
      context: ./
      dockerfile: ./docker/django/Dockerfile
    volumes:
      - ./backend:/app/backend
    depends_on:
      - pg
      - redis
    environment:
      POSTGRES_DB: oe
      POSTGRES_USER: oe
      POSTGRES_NAME: oe
      POSTGRES_PASSWORD: oepass
      POSTGRES_HOST: "pg"
      POSTGRES_PORT: "5432"
      APP_DOMAIN: ${APP_DOMAIN}
      SECRET_KEY: ${SECRET_KEY}
      CELERY_BROKER: redis://redis:6379/0
      CELERY_BACKEND: redis://redis:6379/0
    command: >
      sh -c "pipenv run python manage.py makemigrations && 
      pipenv run python manage.py migrate && 
      pipenv run python manage.py shell -c \"from django.contrib.auth.models import User; User.objects.filter(username='admin').exists() or User.objects.create_superuser('admin', 'ea@rostkov.me', 'admin')\" &&
      pipenv run python manage.py collectstatic --noinput && 
      pipenv run gunicorn --bind :8000 --workers=5 --threads=2 --timeout 600 OntoMuseum.wsgi:application"

  nginx:
    restart: always
    build:
      context: ./
      dockerfile: docker/nginx/Dockerfile
    ports:
      - "8888:80"
    networks:
      - default
    volumes:
      - ./backend:/app/backend
      - ./docker/nginx/nginx.conf:/etc/nginx/conf.d/nginx.conf
    depends_on:
      - django

  celery:
    build:
      context: ./
      dockerfile: docker/django/Dockerfile
    command: >
      sh -c "pipenv run celery --app OntoMuseum worker --loglevel=info && pipenv run celery --app OntoMuseum worker beat -S django"
    volumes:
      - ./backend:/app/backend
    environment:
      - DEBUG=1
      - SECRET_KEY=dbaa1_i7%*3r9-=z-+_mz4r-!eetd@(-a_r(g@k8jo8y3r27%m
      - DJANGO_ALLOWED_HOSTS=localhost 127.0.0.1 [::1]
      - CELERY_BROKER=redis://redis:6379/0
      - CELERY_BACKEND=redis://redis:6379/0
      - POSTGRES_DB=oe
      - POSTGRES_USER=oe
      - POSTGRES_NAME=oe
      - POSTGRES_PASSWORD=oepass
      - POSTGRES_HOST=pg
      - POSTGRES_PORT=5432
    depends_on:
      - django
      - redis
      - pg
  redis:
    image: redis:6-alpine

  zookeeper:
    image: wurstmeister/zookeeper:3.4.6
    ports:
      - "2181:2181"
  kafka:
    image: wurstmeister/kafka
    ports:
      - "9092:9092"
    expose:
      - "9093"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9093,OUTSIDE://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9093,OUTSIDE://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: "ontologies:1:1"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
  kafka-manager:
    image: sheepkiller/kafka-manager:latest
    container_name: kafka-manager
    ports:
      - "9000:9000"
    depends_on:
      - zookeeper
      - kafka
    networks:
      - default
    environment:
      ZK_HOSTS: zookeeper:2181

  ontology-extender:
    image: python:3
    volumes:
      - ./ontologyExtender:/app
    command: >
      sh -c "cd /app && pip install -r requirements.txt && python main.py"
    restart: always
    depends_on:
      - kafka
      - pg
      - redis
    environment:
      POSTGRES_DB: oe
      POSTGRES_USER: oe
      POSTGRES_NAME: oe
      POSTGRES_PASSWORD: oepass
      POSTGRES_HOST: "pg"
      POSTGRES_PORT: "5432"
      KAFKA_HOST: "kafka"
      KAFKA_PORT: "29092"

volumes:
  pgdata_zilions: { }

networks:
  default:
    driver: bridge
